import 'package:flutter/material.dart';
import '../../../core/theme.dart';
import '../../../models/message.dart';
import '../../../models/chat_store.dart';
import 'conversation_page.dart';

class NewChatPage extends StatefulWidget {
  const NewChatPage({super.key});

  @override
  State<NewChatPage> createState() => _NewChatPageState();
}

class _NewChatPageState extends State<NewChatPage> {
  final _formKey = GlobalKey<FormState>();
  final _recipient = TextEditingController();
  final _firstMessage = TextEditingController();
  final List<String> _attachments = [];

  @override
  void dispose() {
    _recipient.dispose();
    _firstMessage.dispose();
    super.dispose();
  }

  // Mock picker (no filesystem; same UX as lecturer compose)
  Future<void> _pickAttachment() async {
    final choice = await showModalBottomSheet<String>(
      context: context,
      backgroundColor: Colors.white,
      builder: (ctx) => SafeArea(
        child: Wrap(
          children: [
            ListTile(
              leading: const Icon(Icons.insert_drive_file_outlined),
              title: const Text('Choose document (mock)'),
              onTap: () => Navigator.pop(ctx, 'AssignmentDraft.pdf'),
            ),
            ListTile(
              leading: const Icon(Icons.photo_outlined),
              title: const Text('Choose photo (mock)'),
              onTap: () => Navigator.pop(ctx, 'IMG_2043.jpg'),
            ),
            ListTile(
              leading: const Icon(Icons.picture_as_pdf_outlined),
              title: const Text('Rubric (mock)'),
              onTap: () => Navigator.pop(ctx, 'Rubric.pdf'),
            ),
            const SizedBox(height: 8),
          ],
        ),
      ),
    );
    if (choice != null && choice.isNotEmpty) {
      setState(() => _attachments.add(choice));
    }
  }

  void _removeAttachment(String name) {
    setState(() => _attachments.remove(name));
  }

  void _startConversation() {
    if (!_formKey.currentState!.validate()) return;

    final handle = _recipient.text.trim();
    final firstMsg = _firstMessage.text.trim();
    final pseudoEmail = '${handle.toLowerCase().replaceAll(' ', '.')}@chat.local';

    // Build initial message(s)
    final initial = <Message>[
      Message(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        senderId: 'student',
        text: firstMsg,
        sentAt: DateTime.now(),
      ),
    ];
    if (_attachments.isNotEmpty) {
      initial.add(
        Message(
          id: '${DateTime.now().millisecondsSinceEpoch}_att',
          senderId: 'system',
          text: 'Attachments: ${_attachments.join(', ')}',
          sentAt: DateTime.now(),
        ),
      );
    }

    // ✅ Add thread to ChatStore so it appears in ChatPage
    ChatStore.I.addThread(
      peerName: handle,
      peerEmail: pseudoEmail,
      color: kNavy,
      initialMessages: initial,
    );

    // Navigate into the conversation that shares the same backing list
    final t = ChatStore.I.threads.first; // just inserted at index 0
    Navigator.pushReplacement(
      context,
      MaterialPageRoute(
        builder: (_) => ConversationPage(
          peerName: t.peerName,
          peerEmail: t.peerEmail,
          avatarColor: t.color,
          messages: t.messages,
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('New Message'),
        actions: [
          IconButton(
            tooltip: 'Add attachment',
            onPressed: _pickAttachment,
            icon: const Icon(Icons.attach_file),
          ),
        ],
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.fromLTRB(16, 16, 16, 24),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              TextFormField(
                controller: _recipient,
                decoration: const InputDecoration(
                  labelText: 'Recipient',
                  hintText: 'Type a name or student ID (e.g. CIHE23538)',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.person_add_alt_1_outlined),
                ),
                validator: (v) =>
                (v == null || v.trim().isEmpty) ? 'Enter a recipient' : null,
              ),
              const SizedBox(height: 14),
              TextFormField(
                controller: _firstMessage,
                minLines: 3,
                maxLines: 6,
                decoration: const InputDecoration(
                  labelText: 'Message',
                  hintText: 'Say hello, ask a question, share a file…',
                  alignLabelWithHint: true,
                  border: OutlineInputBorder(),
                ),
                validator: (v) =>
                (v == null || v.trim().isEmpty) ? 'Write a message' : null,
              ),
              const SizedBox(height: 10),

              // Attachment chips
              if (_attachments.isNotEmpty) ...[
                Wrap(
                  spacing: 8,
                  runSpacing: 8,
                  children: _attachments
                      .map((f) => InputChip(
                    label: Text(f),
                    onDeleted: () => _removeAttachment(f),
                  ))
                      .toList(),
                ),
                const SizedBox(height: 12),
              ],

              SizedBox(
                height: 48,
                child: FilledButton(
                  onPressed: _startConversation,
                  style: FilledButton.styleFrom(
                    backgroundColor: kNavy,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10),
                    ),
                  ),
                  child: const Text(
                    'Send',
                    style: TextStyle(fontWeight: FontWeight.w700),
                  ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
