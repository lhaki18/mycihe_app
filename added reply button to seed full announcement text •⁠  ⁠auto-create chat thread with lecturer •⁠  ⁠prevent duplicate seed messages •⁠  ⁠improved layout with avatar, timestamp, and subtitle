import 'package:flutter/material.dart';
import '../../../core/theme.dart';
import '../../../models/announcement.dart';
import '../chat/conversation_page.dart';
import '../../../models/chat_store.dart';
import '../../../models/message.dart';

class AnnouncementDetailPage extends StatelessWidget {
  final Announcement ann;
  const AnnouncementDetailPage({super.key, required this.ann});

  String _format(DateTime d) {
    const months = [
      "Jan","Feb","Mar","Apr","May","Jun",
      "Jul","Aug","Sep","Oct","Nov","Dec"
    ];
    final h = d.hour % 12 == 0 ? 12 : d.hour % 12;
    final ampm = d.hour >= 12 ? "PM" : "AM";
    final mm = d.minute.toString().padLeft(2, '0');
    return "${months[d.month - 1]} ${d.day}, $h:$mm $ampm";
  }

  void _reply(BuildContext context) {
    // Ensure a chat thread exists for this lecturer
    final thread = ChatStore.I.ensureThread(
      peerName: ann.senderName,
      peerEmail: ann.senderEmail,
      color: kNavy,
    );

    // Seed with full announcement text if not already seeded
    final fullText = 'ðŸ“¢ Announcement: ${ann.title}\n\n${ann.body}';
    final alreadySeeded = thread.messages.isNotEmpty &&
        thread.messages.first.text == fullText;

    if (!alreadySeeded) {
      ChatStore.I.addMessage(
        thread,
        Message(
          id: DateTime.now().microsecondsSinceEpoch.toString(),
          senderId: 'system',
          text: fullText,
          sentAt: DateTime.now(),
        ),
        insertAtStart: true,
      );
    }

    // Open the conversation
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (_) => ConversationPage(
          peerName: thread.peerName,
          peerEmail: thread.peerEmail,
          avatarColor: thread.color,
          messages: thread.messages,
        ),
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(title: const Text('Announcement')),
      body: SingleChildScrollView(
        padding: const EdgeInsets.fromLTRB(20, 16, 20, 28),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(children: [
              CircleAvatar(
                radius: 22,
                backgroundColor: kNavy,
                child: Text(
                  ann.senderName.trim().isEmpty
                      ? "?"
                      : ann.senderName.trim()[0].toUpperCase(),
                  style: const TextStyle(
                    color: Colors.white,
                    fontWeight: FontWeight.w800,
                    fontSize: 18,
                  ),
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(ann.senderName,
                        style: const TextStyle(
                            fontSize: 16, fontWeight: FontWeight.w700)),
                    Text(ann.senderEmail,
                        style: const TextStyle(
                            fontSize: 13, color: Colors.black54)),
                  ],
                ),
              ),
            ]),
            const SizedBox(height: 16),
            Text(ann.title,
                style: const TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.w800,
                    color: kNavy)),
            const SizedBox(height: 6),
            Text(ann.subtitle,
                style: const TextStyle(color: Colors.black54)),
            const SizedBox(height: 10),
            Row(children: [
              const Icon(Icons.calendar_today, size: 16, color: Colors.black54),
              const SizedBox(width: 6),
              Text(_format(ann.postedAt),
                  style: const TextStyle(color: Colors.black54)),
            ]),
            const SizedBox(height: 16),
            const Divider(),
            const SizedBox(height: 12),
            Text(ann.body,
                style: const TextStyle(fontSize: 16, height: 1.4)),
            const SizedBox(height: 24),
            SizedBox(
              width: double.infinity,
              height: 44,
              child: FilledButton.icon(
                onPressed: () => _reply(context),
                style: FilledButton.styleFrom(
                  backgroundColor: kNavy,
                  shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(10)),
                ),
                icon: const Icon(Icons.reply),
                label: const Text('Reply'),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
